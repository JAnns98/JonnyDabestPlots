[
  {
    "objectID": "horizontal plots and key grid.html",
    "href": "horizontal plots and key grid.html",
    "title": "Horizontal Plots & Key Grid",
    "section": "",
    "text": "def colormaker(number:int,custom_pal=None,desat_level:float=0.5):\n    \"\"\"Create Colors\n\n    Args:\n        number (int): The number of colors to create.\n        custom_pal (typically tuple, optional): Can supply specific color choices. Defaults to None.\n        desat_level (float, optional): Desaturation level. Defaults to 0.5.\n    Returns:\n        lists: Two lists with the color palette before and after desaturation.\n    \"\"\"\n\n    import seaborn as sns\n    import matplotlib.pyplot as plt \n\n    # If no custom palette is provided, use the default seaborn palette\n    if custom_pal is None:\n        colors = sns.color_palette(n_colors=number)\n    # If a tuple is provided, check it is the right length\n    elif isinstance(custom_pal, tuple):\n        if len(custom_pal) != number:\n            raise ValueError('Number of colors inputted does not equal number of samples')\n        else:\n            colors = custom_pal\n    # If a string is provided, check it is a matplotlib palette\n    elif isinstance(custom_pal, str):\n        # check it is in the list of matplotlib palettes.\n        if custom_pal in plt.colormaps():\n            colors = sns.color_palette(custom_pal, number)\n        else:\n            raise ValueError('The specified `custom_palette` {} is not a matplotlib palette. Please check.'.format(custom_pal))\n    else:\n        raise TypeError('Incorrect color input format')\n\n    # Desaturate the colors\n    desat_colors = [sns.desaturate(c, desat_level) for c in colors] \n    return colors,desat_colors\n\n\n\n\n\ndef key_grid(df, ind_var:str):\n    \"\"\" This function creates the keygrid data\n    Args:\n        df (Dataframe): The Inputted dataframe in melted format. One column for paired index (0,0,1,1 etc), one for genotype, one for the dependent variable, and one for paired condition.\n        ind_var (string): The column name for independent variable - Typically will be 'Genotype'.\n    Raises:\n        ValueError: _description_\n    Returns:\n        df: Dataframe with added keygrid.\n        Constructs: List of the constructs/genetic elements used.\n    \"\"\"\n    # Create a copy of the dataframe\n    df1=df.copy()\n    # Initialise variable\n    idx = 1\n    geno_out = 1\n    constructs = []\n    # Loop to get each construct used\n    while geno_out != '0':\n        geno_out = input(\"Enter each construct used. To break loop enter '0': \")\n        idx += 1\n        constructs.append(geno_out)\n    constructs = constructs[:-1]\n    print('For the experiment, the construct(s) you have supplied are {}'.format(constructs))\n\n    ## Matching constructs to genotype\n    # Loop to get each genotype\n    for idx, geno in enumerate(df1[ind_var].unique()):\n        print('For experiment: {}, the provided genotype name is {}'.format(idx+1, geno))\n        geno_all = []\n        # Loop to get each construct\n        for construct in constructs:\n            yesno = input(\"Is {} present in {}. Y for yes, N for no\".format(construct,geno))\n            # If construct is present, set variable to 1\n            if yesno.lower() == 'y':\n                df1.loc[(df1[ind_var] == geno), [construct]] = 1\n                geno_all.append(construct)\n            # If construct is not present, set variable to 0\n            elif yesno.lower() == 'n':\n                df1.loc[(df1[ind_var] == geno), [construct]] = 0\n            else:\n                raise ValueError('Mistyped Y or N for the construct')\n        print('You have suggested this genotype contains: {}'.format(geno_all))\n        print(\"-\"*60)\n    yesno = input(\"Were these genotypes and their constructs typed correctly?. Y for yes, N for no\")\n    if yesno.lower() == 'n':\n        raise ValueError('Try again :)')\n    return df1,constructs\n\n\ndef grid_key_plotter(axes, df, order:tuple, ind_var:str, constructs:list, pair_title:str,paired:bool=True,custom_pal=None,\n                    grid_key_grid_color='black', grid_key_marker_size:int = 10, grid_key_font_size:int = 10, grid_key_labels_xpos:int=0.8, grid_key_opacity=1,grid_key_marker_desat=True):\n    \"\"\"Key Grid Plotter\n\n    Args:\n        axes (axis): The axis to be plotted on to.\n        df (DataFrame): The dataframe with Keygrid data. Melted format.\n        order (tuple): The order of the genotypes used in the experiment.\n        ind_var (str): The column name for the indepedent variable. \n        constructs (list): List of column names for the Key Grid data. \n        pair_title (str): Paired data column Name.\n        paired (bool, optional): Is the data paired?. Defaults to True.\n        custom_pal (list/tuple): Can provide color palette. Defaults to None.\n        grid_key_grid_color (str, optional): Color of the Grid lines. Defaults to 'black'.\n        grid_key_marker_size (int, optional): Marker size for the dots. Defaults to 10.\n        grid_key_font_size (int, optional): Font size. Defaults to 10.\n        grid_key_labels_xpos (int, optional): The relative X-Position of the construct labels. Can adjust: typically between 0.5-0.8. Defaults to 0.8.\n        grid_key_opacity (int, optional): Opacity for the Grid lines. Defaults to 1.\n        grid_key_marker_desat (bool, optional): Whether to use desat colors for the markers. Defaults to True.\n    \"\"\"\n    # Import Module(s) & Basic info\n    import numpy as np\n    Num_Exps=len(order)\n    colors,desat_colors = colormaker(number=Num_Exps,custom_pal=custom_pal)\n\n    ## Create Labels for X-Axis\n    labels = constructs.copy()\n    labels.insert(0,'N')\n    if paired == True:\n        labels.append(pair_title) \n\n    ## Plotting the Grid\n    for y in range(0,Num_Exps+1):\n        axes.plot([0, len(labels)], [y, y],color=grid_key_grid_color, linewidth = 1,alpha=grid_key_opacity,zorder=3)\n    for x in range(0,len(labels)+1):\n        axes.plot([x, x], [0, Num_Exps],color=grid_key_grid_color, linewidth = 1,alpha=grid_key_opacity,zorder=3)   \n    if paired == True:\n        for y in np.arange(0.5,Num_Exps,0.5):\n            axes.plot([len(labels)-1,len(labels)], [y,y],color=grid_key_grid_color, linewidth = 1,alpha=grid_key_opacity,zorder=3) \n\n    ## Plotting the Dot\n    for ypos, (genotype, color) in enumerate(zip(order,colors if grid_key_marker_desat==False else desat_colors)):\n        exp = df[df[ind_var] == genotype].iloc[:,-(len(constructs)):]\n        for xpos in np.arange(0,len(constructs),1):\n            if exp.iloc[0,xpos] > 0:\n                axes.plot(xpos+1.5,ypos+0.5, marker=\"o\",color=color,markersize = grid_key_marker_size,zorder=5)\n            if paired == True:\n                axes.plot(len(labels)-0.5,ypos+0.25, marker=\"o\",color=color,markersize = grid_key_marker_size,zorder=5)\n\n    ## Plotting Sample Size in the Key Grid\n    for x,genotype in zip(np.arange(0.5,Num_Exps,1),order):\n        axes.text(0.5, x,int(len(df[df[ind_var] == genotype])/2),color='black', fontsize=grid_key_font_size,verticalalignment='center', horizontalalignment='center',)\n\n    ## Set Parameters for X & Y axes\n    axes.tick_params(left=False,bottom=False,axis='x', which='major', pad=-2)\n    axes.spines[['top','right','left']].set_color('none')\n    axes.set_xticks(np.arange(grid_key_labels_xpos,len(labels),1))\n    axes.set_xticklabels(labels,rotation = 45, ha = 'right', fontsize = 10)\n    axes.set_xlim(0, len(labels)+0.05)\n    axes.set_yticks([])\n    axes.set_ylim(0, Num_Exps)\n\n\n\n\n\ndef swarm_plotter(axes, df, order, ind_var, dep_var, pair_col_name, condition:tuple, custom_pal=None, grid_key=False,\n                  line_alpha=0.1, swarm_marker_size=3, dot_alpha=0.5, mean_alpha=0.8,dot = True, swarm_xlim:tuple = None, swarm_axis_title=None, \n                  swarm_font_size=15,swarm_ytick_labels=None,ytick_labels_samplesize=None):\n    \"\"\"The swarm/paired plot plotter\n\n    Args:\n        axes (axis object): The subplot axes it will be plotted on\n        df (Dataframe): The Inputted dataframe in melted format. One column for paired index (0,0,1,1 etc), one for genotype, one for the dependent variable, and one for paired condition.  \n        order (tuple): Input the order of the genotypes to plot - Must be tuple/list of strings with same names as in the genotype column of the dataframe.\n        ind_var (string): The column name for independent variable - Typically will be 'Genotype'.\n        dep_var (str): The column name for depedent variable.\n        pair_col_name (str): The column name for paired condition.\n        condition (tuple): Tuple/List of two strings for the data within the paired condition column, in the order you want to analyse. Eg. ('Off', 'On').\n        custom_pal (list/tuple): Can provide color palette. Defaults to None.\n        grid_key (bool): Whether the grid_key is included in the main plot.\n        line_alpha (float, optional): The alpha for the swarmplot lines. Defaults to 0.1.\n        swarm_marker_size (int, optional): The dot size for the swarmplot dots. Defaults to 3.\n        dot_alpha (float, optional): The alpha for the swarmplot dots. Defaults to 0.5.\n        dot (bool, optional): Include dots in the swarmplot?. Defaults to True.\n        swarm_xlim (tuple, optional): The swarm plot X range. Defaults to None.\n        swarm_axis_title (str, optional): Title for the swarm plot. Defaults to None.\n        swarm_font_size (int, optional): The font size for the swarmplot. Defaults to 15.\n        swarm_ytick_labels (tuple(Str)): The labels for Y-Axis if grid_key=False.\n        ytick_labels_samplesize (bool): Whether to show sample size with the labels. \n    \"\"\"\n    ## Import Modules(s) & basic info\n    import numpy as np\n    Num_Exps=len(order)    \n    colors,desat_colors = colormaker(number=Num_Exps,custom_pal=custom_pal)\n\n    ## Create the data tuples & Mean + SD tuples\n    output_x, output_y=[],[]\n    means,sd=[],[]\n    for genotype,ydiff1,ydiff2 in zip(order,np.arange(0.75,Num_Exps,1),np.arange(0.25,Num_Exps,1)):\n        data = df[df[ind_var] == genotype]\n        output_x.append(np.array([data[data[pair_col_name].str.contains(condition[0])][dep_var],data[data[pair_col_name].str.contains(condition[1])][dep_var]]))\n        output_y.append(np.array([int((len(data)/2))*[ydiff1],int((len(data)/2))*[ydiff2]]))\n\n        means.append(np.array([data[data[pair_col_name].str.contains(condition[0])][dep_var].mean(),data[data[pair_col_name].str.contains(condition[1])][dep_var].mean()]))\n        sd.append(np.array([data[data[pair_col_name].str.contains(condition[0])][dep_var].std(),data[data[pair_col_name].str.contains(condition[1])][dep_var].std()]))\n\n    ## Plot the pairs of data\n    for x, y, c in zip(output_x,output_y,colors):  \n        axes.plot(x, y,color=c, alpha=line_alpha)\n\n    ## Plot dots for each pair of data\n    if dot==True:\n        for genotype,y in zip(order,np.arange(0,Num_Exps,1)):\n            data = df[df[ind_var] == genotype]\n            off = data[data[pair_col_name].str.contains(condition[0])][dep_var]\n            on = data[data[pair_col_name].str.contains(condition[1])][dep_var]\n            axes.plot(on,len(on)*[(0.25)+y], 'o',color=desat_colors[y],markersize = swarm_marker_size,alpha=dot_alpha)\n            axes.plot(off,len(off)*[(0.75)+y],'o',color=desat_colors[y], markersize = swarm_marker_size,alpha=dot_alpha)  \n\n    ## Plot Mean & SD tuples\n    for m,c in zip(np.arange(0,Num_Exps,1),desat_colors):\n        axes.plot(means[m][0],m+0.88, marker=\"s\",color='white',markersize = 3,zorder=5)\n        axes.plot(means[m][1],m+0.12, marker=\"s\",color='white',markersize = 3,zorder=5)\n\n        axes.plot([means[m][0]-sd[m][0], means[m][0]+sd[m][0]], [m+0.88, m+0.88],color=c, alpha=mean_alpha, linewidth = 2.5,zorder=3)\n        axes.plot([means[m][1]-sd[m][1], means[m][1]+sd[m][1]], [m+0.13, m+0.13],color=c, alpha=mean_alpha,linewidth = 2.5,zorder=3)\n\n    ## Parameters for X & Y axes\n    axes.set_ylim(0, Num_Exps)\n    axes.tick_params(left=True)\n\n    if grid_key==False:\n        axes.set_yticks(np.arange(0.5,Num_Exps,1))\n        \n        yticklabels=[]\n        if swarm_ytick_labels==None:\n            for n in np.arange(0,Num_Exps,1):\n                yticklabels.append('Experiment '+ str(n))\n        else:\n            for n,x,genotype in zip(np.arange(0,Num_Exps,1),np.arange(0.5,Num_Exps,1),order):\n                if  ytick_labels_samplesize == True:\n                    data = df[df[ind_var] == genotype]\n                    ss=int(len(data)/2)\n                    yticklabels.append(swarm_ytick_labels[n]+'\\n'+'n= '+str(ss))\n                else:\n                    yticklabels.append(swarm_ytick_labels[n])\n        axes.set_yticklabels(yticklabels,ma='center')\n        axes.spines[['top', 'right']].set_color(None)\n\n    else:\n        axes.set_yticks([])\n        axes.spines[['top', 'right','left']].set_color(None)\n\n    if swarm_axis_title != None:\n        axes.set_xlabel(swarm_axis_title, fontsize = swarm_font_size)\n    else:\n        axes.set_xlabel('Variable', fontsize = swarm_font_size)\n\n    if swarm_xlim != None:\n        axes.set_xlim(swarm_xlim[0], swarm_xlim[1])\n\n\n\n\n\ndef violin_plotter(axes, df, order, ind_var, dep_var, pair_col_name, condition:tuple, idcol, \n                   custom_pal=None, mean_marker_size=20, contrast_axis_title=None, contrast_font_size=15, contrast_xlim=None):\n    \"\"\" Function to plot horizontal violinplots \n\n    Args:\n        axes (axis object): The subplot axes it will be plotted on.\n        df (Dataframe): The Inputted dataframe in melted format. One column for paired index (0,0,1,1 etc), one for genotype, one for the dependent variable, and one for paired condition.  \n        order (tuple): Input the order of the genotypes to plot - Must be tuple/list of strings with same names as in the genotype column of the dataframe.\n        ind_var (string): The column name for independent variable - Typically will be 'Genotype'.\n        dep_var (str): The column name for depedent variable.\n        pair_col_name (str): The column name for paired condition.\n        condition (tuple): Tuple/List of two strings for the data within the paired condition column, in the order you want to analyse. Eg. ('Off', 'On').\n        idcol (str): The column name for index type column containing the pairs of experiment (Eg. 0,0,1,1 etc).\n        custom_pal (list/tuple): Can provide color palette. Defaults to None.\n        mean_marker_size (int, optional): The size for the violin plot mean dot. Defaults to 20.\n        contrast_axis_title (tuple, optional): Title for the violin plot. Defaults to None.\n        contrast_font_size (int, optional): The font size for the violin plot. Defaults to 15.\n        contrast_xlim (tuple, optional): The violin plot X range. Defaults to None.\n\n    Returns:\n        contrasts (list): list of the dabest contrasts.\n    \"\"\"    \n    ## Import Modules(s) & basic info\n    import numpy as np\n    import dabest\n    from dabest import plot_tools\n    Num_Exps=len(order) \n    colors,desat_colors = colormaker(number=Num_Exps,custom_pal=custom_pal)\n    \n    ## Create the dabest data for curves\n    contrasts = []\n    for genotype in order:\n        data = df[df[ind_var] == genotype]\n        contrasts.append(dabest.load(data, idx=(condition[0], condition[1]),x=pair_col_name, y=dep_var,paired=True, id_col=idcol))\n    Dbootstraps = [c.mean_diff.results.bootstraps[0] for c in contrasts]\n\n    ## Plot the voilin curves\n    default_violinplot_kwargs = {'widths':1, 'vert':False,'showextrema':False, 'showmedians':False, 'positions': np.arange(0.25,Num_Exps,1)}\n    v = axes.violinplot(Dbootstraps, **default_violinplot_kwargs)\n    dabest.plot_tools.halfviolin(v,  half='top', alpha = 0.4)\n    for n,c in zip(np.arange(0,Num_Exps,1),colors):\n        axes.collections[n].set_fc(c)\n\n    ## Plot the mean and CIs    \n    for x,y in zip(contrasts,np.arange(0.25,Num_Exps+1,1)):\n        axes.plot(x.mean_diff.results.difference[0],y, 'k.', markersize = mean_marker_size)\n        axes.plot([x.mean_diff.results.bca_low[0], x.mean_diff.results.bca_high[0]], [y, y],'k', linewidth = 2.5)\n    axes.plot([0, 0], [0, Num_Exps], 'k', linewidth = 1)\n    if contrast_axis_title != None:\n        axes.set_xlabel(contrast_axis_title, fontsize = contrast_font_size)\n    else:\n        axes.set_xlabel('Δ Variable', fontsize = contrast_font_size)\n\n    if contrast_xlim != None:\n        axes.set_xlim(contrast_xlim[0], contrast_xlim[1])\n\n    ## Parameters for X & Y axes\n    axes.set_ylim(0, Num_Exps)\n    axes.set_yticks([])\n    axes.tick_params(left=False)\n    axes.spines[['top','right','left']].set_color(None)   \n    return contrasts\n\n\n\n\n\ndef table_plotter(axes, contrasts, table_font_size):\n    \"\"\"Function to plot the delta table\n\n    Args:\n        axes (axis object): The subplot axes it will be plotted on\n        contrasts (list): list of the dabest contrasts\n        table_font_size (int, optional): The font size for the delta table. Defaults to 15.\n    \"\"\"    \n    ## Import Modules(s) & basic info\n    import pandas as pd\n    \n    ## Create a table of deltas\n    cols=['Δ','N']\n    lst = []\n    for x in contrasts:\n            lst.append([x.mean_diff.results.difference[0],0])\n    tab = pd.DataFrame(lst, columns=cols)\n\n    ## Plot the background color\n    axes.axvspan(0, 1, facecolor='0.2', alpha=0.2)  \n\n    ## Plot the text\n    for i in tab.index:\n        axes.text(0.5, i+0.5, \"{:+.2f}\".format(tab.iloc[i,0]),ha=\"center\", va=\"center\", color=\"black\")\n\n    ## Parameters for X & Y axes  \n    axes.set_yticks([])\n    axes.set_ylim(0, len(contrasts))\n    axes.tick_params(left=False, bottom=False)\n    axes.spines[['top','bottom','right','left']].set_color(None)\n    axes.set_xticks([0.5])\n    axes.set_xticklabels([\"Δ\"],rotation = 0, ha = 'center', fontsize = table_font_size)"
  },
  {
    "objectID": "horizontal plots and key grid.html#horizontal-plot",
    "href": "horizontal plots and key grid.html#horizontal-plot",
    "title": "Horizontal Plots & Key Grid",
    "section": "Horizontal Plot",
    "text": "Horizontal Plot\n\ndef Horizontal_Plot(df,order:tuple,ind_var:str,dep_var:str, pair_col_name:str, condition:tuple, idcol:str,paired:bool=True, pair_title:str = None,\n\n    grid_key:bool=False,constructs:list = None,grid_key_font_size:int = 10,grid_key_marker_size:int = 10,grid_key_grid_color:str = 'black',\n    grid_key_labels_xpos:float=0.8,grid_key_opacity:float=1,grid_key_marker_desat:bool=True,\n\n    swarm_axis_title:str = None,swarm_xlim:tuple = None,dot:bool = True,dot_alpha:float = 0.5, line_alpha:float = 0.1,swarm_marker_size = 3, swarm_font_size:int = 15,\n\n    contrast_axis_title:tuple = None,contrast_xlim:tuple = None, mean_marker_size:int = 20, contrast_font_size:int = 15,table_font_size:int = 15,\n\n    figsize:tuple=(10,4),main_width_ratio:tuple = (1.5,1), main_wspace:float = 0.05, subplot1_width_ratio:tuple = (1,2.5), subplot2_width_ratio:tuple = (3,1), \n    subplot1_wspace:float = 0,subplot2_wspace:float = 0,custom_pal:tuple=None,ytick_labels=None,ytick_labels_samplesize:bool=True,):\n    \"\"\"Horizontal dabest-like plot\n\n    Args:\n        df (dataframe): The Inputted dataframe in melted format. One column for paired index (0,0,1,1 etc), one for genotype, one for the dependent variable, and one for paired condition.\n        order (tuple): Input the order of the genotypes to plot - Must be tuple/list of strings with same names as in the genotype column of the dataframe.\n        ind_var (str): The column name for independent variable - Typically will be 'Genotype'.\n        dep_var (str): The column name for depedent variable.\n        pair_col_name (str): The column name for paired condition.\n        condition (tuple): Tuple/List of two strings for the data within the paired condition column, in the order you want to analyse. Eg. ('Off', 'On').\n        idcol (str): The column name for index type column containing the pairs of experiment (Eg. 0,0,1,1 etc).\n        paired (bool, optional): Is the data paired?. Defaults to True.\n        pair_title (str, optional): The name you choose to describe the paired condition for the grid key label. Defaults to None.\n        grid_key (bool, optional): Whether the grid_key is included in the main plot. Defaults to False.\n        constructs (list, optional): List of column names for the Key Grid data. \n        grid_key_font_size (int, optional): Font size. Defaults to 10.\n        grid_key_marker_size (int, optional): Marker size for the dots. Defaults to 10.\n        grid_key_grid_color (str, optional): Color of the Grid lines. Defaults to 'black'.\n        grid_key_labels_xpos (float, optional): The relative X-Position of the construct labels. Can adjust: typically between 0.5-0.8. Defaults to 0.8.\n        grid_key_opacity (float, optional): Opacity for the Grid lines. Defaults to 1.\n        grid_key_marker_desat (bool, optional): Whether to use desat colors for the markers. Defaults to True.\n        swarm_axis_title (str, optional): Title for the swarm plot. Defaults to None.\n        swarm_xlim (tuple, optional): The swarm plot X-range. Defaults to None.\n        dot (bool, optional): Include dots in the swarmplot?. Defaults to True.\n        dot_alpha (float, optional): The alpha for the swarmplot dots. Defaults to 0.5.\n        line_alpha (float, optional): The alpha for the swarmplot lines. Defaults to 0.1.\n        swarm_marker_size (int, optional): The dot size for the swarmplot dots. Defaults to 3.\n        swarm_font_size (int, optional): The font size for the swarmplot. Defaults to 15.\n        contrast_axis_title (tuple, optional): Title for the violin plot. Defaults to None.\n        contrast_xlim (tuple, optional): The violin plot X-range. Defaults to None.\n        mean_marker_size (int, optional): The size for the violin plot mean dot. Defaults to 20.\n        contrast_font_size (int, optional): The font size for the violin plot. Defaults to 15.\n        table_font_size (int, optional): The font size for the delta table. Defaults to 15.\n        figsize (tuple, optional): The size of the figure. Defaults to (10, 4).\n        main_width_ratio (tuple, optional): The width ratio between the two major subplots. Defaults to (1.5,1).\n        main_wspace (float, optional): The white space between the two major subplots. Defaults to 0.05.\n        subplot1_width_ratio (tuple, optional): The width ratio between the first two minor subplots. Defaults to (1,2.5).\n        subplot2_width_ratio (tuple, optional): The width ratio between the second two minor subplots. Defaults to (3,1).\n        subplot1_wspace (float, optional): The white space between the first two minor subplots. Defaults to 0.\n        subplot2_wspace (float, optional): The white space between the second two minor subplots. Defaults to 0.\n        custom_pal (tuple/str/list, optional): Can provide color palette. Defaults to None.\n        ytick_labels (_type_, optional): The labels for Y-Axis if grid_key=False.\n        ytick_labels_samplesize (bool, optional): Whether to show sample size with the labels. \n\n    Raises:\n        ValueError: Must provide constructs as a list of constructs used as per the column names.\n\n    Returns:\n        fig object: figure\n    \"\"\"\n\n    # Import Modules & Create Parameters\n    import matplotlib.pyplot as plt \n    from matplotlib import gridspec\n    import seaborn as sns\n    import matplotlib as mpl\n    mpl.rcParams['pdf.fonttype'] = 42\n    mpl.rcParams['ps.fonttype'] = 42\n    # mpl.rcParams['font.family'] = font\n\n    ## Create variable of number of experiments performed\n    Num_Exps = len(order)\n    \n    ## Colors\n    colors,desat_colors = colormaker(number=Num_Exps,custom_pal=custom_pal)\n\n    # Create the Figure\n    fig = plt.figure(figsize = figsize)\n    gs0 = gridspec.GridSpec(1, 2, width_ratios=main_width_ratio, wspace=main_wspace,) \n    if grid_key==True:\n        gs00 = gridspec.GridSpecFromSubplotSpec(1,2, subplot_spec=gs0[0],width_ratios=subplot1_width_ratio, wspace=subplot1_wspace)\n    else: \n        gs00 = gridspec.GridSpecFromSubplotSpec(1,1, subplot_spec=gs0[0])\n    gs01 = gridspec.GridSpecFromSubplotSpec(1,2, subplot_spec=gs0[1],width_ratios=subplot2_width_ratio, wspace=subplot2_wspace)  \n\n\n    # Key Grid Subplot\n    ## Begin the subplot\n    if grid_key==True:\n        axk = fig.add_subplot(gs00[0])\n\n        ## Create the Key Grid data\n        if constructs == None:\n            raise ValueError('Must provide constructs as a list of constructs used as per the column names')\n        else:\n            df1=df.copy()\n\n        ## Plot the Key Grid\n        grid_key_plotter(axk, df1, order=order, ind_var=ind_var, constructs=constructs, pair_title=pair_title if pair_title != None else pair_col_name,paired=paired,custom_pal=custom_pal,\n                                grid_key_grid_color=grid_key_grid_color, grid_key_marker_size=grid_key_marker_size, grid_key_font_size=grid_key_font_size,\n                                grid_key_labels_xpos=grid_key_labels_xpos, grid_key_opacity=grid_key_opacity,grid_key_marker_desat=grid_key_marker_desat)\n\n    #Swarm plot Subplot\n    ## Begin the subplot\n    if grid_key==True:\n        ax = fig.add_subplot(gs00[1])\n    else:\n        ax = fig.add_subplot(gs00[0])\n        ax.spines[['left']].set_color('black')\n\n    ## Plot the swarm data\n    swarm_plotter(ax,df, order=order, ind_var=ind_var, dep_var=dep_var, pair_col_name=pair_col_name, condition=condition, custom_pal=custom_pal,\n                line_alpha=line_alpha, swarm_marker_size=swarm_marker_size,dot_alpha=dot_alpha, dot=dot, swarm_xlim=swarm_xlim, swarm_axis_title=swarm_axis_title, \n                swarm_font_size=swarm_font_size,swarm_ytick_labels=ytick_labels,ytick_labels_samplesize=ytick_labels_samplesize,grid_key=grid_key)\n\n    # Violin Plot / Contrast Axis\n    ## Begin the subplot\n    ax1 = fig.add_subplot(gs01[0])\n\n    ## Plot the Violins\n    contrasts = violin_plotter(ax1, df, order=order, ind_var=ind_var, dep_var=dep_var, pair_col_name=pair_col_name, condition=condition, idcol=idcol, custom_pal=custom_pal,\n                mean_marker_size=mean_marker_size, contrast_axis_title=contrast_axis_title, contrast_font_size=contrast_font_size, contrast_xlim=contrast_xlim)\n\n    # Table    \n    ## Begin the subplot\n    ax2 = fig.add_subplot(gs01[1])\n\n    ## Plot the Table\n    table_plotter(ax2, contrasts=contrasts, table_font_size=table_font_size)\n    \n    return fig"
  },
  {
    "objectID": "horizontal plots and key grid.html#data-import",
    "href": "horizontal plots and key grid.html#data-import",
    "title": "Horizontal Plots & Key Grid",
    "section": "Data Import",
    "text": "Data Import\n\nimport pandas as pd\nimport os\nfrom nbdev.showdoc import* \n\ndf = pd.read_csv('https://raw.githubusercontent.com/JAnns98/JonnyDataFiles/main/OK371_Example.csv')\nprint(df.head(5))\n\n   Fly Light     Value   Genotype\n0    0    On  0.293243  OK371 ACR\n1    0   Off  0.716568  OK371 ACR\n2    2    On  0.052326  OK371 ACR\n3    2   Off  2.464670  OK371 ACR\n4    3    On  1.270908  OK371 ACR"
  },
  {
    "objectID": "horizontal plots and key grid.html#plots",
    "href": "horizontal plots and key grid.html#plots",
    "title": "Horizontal Plots & Key Grid",
    "section": "Plots",
    "text": "Plots\n\nPlotting Without key grid\n\nfig = Horizontal_Plot(df.fillna(0),order=('OK371 KCR1GS', 'OK371 KCR1OPT', 'OK371 ACR', 'UAS-KCR1GS','UAS-KCR1OPT','UAS-ACR', 'OK371-Gal4'),ind_var = 'Genotype',dep_var = 'Value',\npaired=True,pair_col_name = 'Light', condition = ('Off', 'On'),idcol = 'Fly',swarm_axis_title = 'Speed (mm/sec)',contrast_axis_title='Δ Speed (mm/sec)', \nfigsize=(8,4),main_width_ratio=(1,1),ytick_labels=('OK371>KCR1-GS', 'OK371>KCR1-ET', 'OK371>ACR', 'UAS-KCR1-GS','UAS-KCR1-ET','UAS-ACR', 'OK371-Gal4'),contrast_xlim=(-1.2,1.2),grid_key=False,ytick_labels_samplesize=False);\n\n\n\n\n\n\nPlotting with KeyGrid\n\ndf1, constructs = key_grid(df,'Genotype')\n\nFor the experiment, the construct(s) you have supplied are ['OK371-Gal4', 'UAS-ACR1', 'UAS-KCR1-ET', 'UAS-KCR1-GS']\nFor experiment: 1, the provided genotype name is OK371 ACR\nYou have suggested this genotype contains: ['OK371-Gal4', 'UAS-ACR1']\n------------------------------------------------------------\nFor experiment: 2, the provided genotype name is OK371 KCR1GS\nYou have suggested this genotype contains: ['OK371-Gal4', 'UAS-KCR1-GS']\n------------------------------------------------------------\nFor experiment: 3, the provided genotype name is OK371 KCR1OPT\nYou have suggested this genotype contains: ['OK371-Gal4', 'UAS-KCR1-ET']\n------------------------------------------------------------\nFor experiment: 4, the provided genotype name is UAS-ACR\nYou have suggested this genotype contains: ['UAS-ACR1']\n------------------------------------------------------------\nFor experiment: 5, the provided genotype name is UAS-KCR1GS\nYou have suggested this genotype contains: ['UAS-KCR1-GS']\n------------------------------------------------------------\nFor experiment: 6, the provided genotype name is UAS-KCR1OPT\nYou have suggested this genotype contains: ['UAS-KCR1-ET']\n------------------------------------------------------------\nFor experiment: 7, the provided genotype name is OK371-Gal4\nYou have suggested this genotype contains: ['OK371-Gal4']\n------------------------------------------------------------\n\n\n\nfig = Horizontal_Plot(df1.fillna(0),order=('OK371 KCR1GS', 'OK371 KCR1OPT', 'OK371 ACR', 'UAS-KCR1GS','UAS-KCR1OPT','UAS-ACR', 'OK371-Gal4'),ind_var = 'Genotype',dep_var = 'Value',\npaired=True,pair_col_name = 'Light', condition = ('Off', 'On'),idcol = 'Fly',swarm_axis_title = 'Speed (mm/sec)',contrast_axis_title='Δ Speed (mm/sec)', \nfigsize=(10,4),main_width_ratio=(1.5,1),contrast_xlim=(-1.2,1.2),grid_key=True,constructs=['OK371-Gal4', 'UAS-ACR', 'UAS-KCR1-ET', 'UAS-KCR1-GS']);"
  }
]